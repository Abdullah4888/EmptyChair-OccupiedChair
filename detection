import cv2
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, f1_score, recall_score, confusion_matrix
from sklearn.preprocessing import LabelEncoder
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier

# Load YOLO model
net = cv2.dnn.readNet("yolov4-custom_4000.weights", "yolov4-custom.cfg")

# Load classes from predefined file
classes = []
with open("/home/Abdullah/Downloads/Data/ESS/ChairDetection/predefined_classes.txt", "r") as f:
    classes = [line.strip() for line in f.readlines()]

# Load and preprocess your labeled dataset (images and corresponding labels)
# Example: Assuming you have a list of image file paths and labels
image_paths = [...]  # List of file paths to images
labels = [...]  # List of corresponding labels

# Encode class labels
label_encoder = LabelEncoder()
encoded_labels = label_encoder.fit_transform(labels)

# Split the dataset into train and test sets
X_train, X_test, y_train, y_test = train_test_split(image_paths, encoded_labels, test_size=0.3, random_state=42)

# Define a function for processing images with YOLO and extracting features
def extract_features(image_path):
    img = cv2.imread(image_path)
    img = cv2.resize(img, (416, 416))  # Assuming YOLO input size is 416x416
    blob = cv2.dnn.blobFromImage(img, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
    net.setInput(blob)
    outs = net.forward(output_layer)
    # Extract relevant features from YOLO output and return as a feature vector
    # ...

# Create train and test feature vectors
X_train_features = [extract_features(image_path) for image_path in X_train]
X_test_features = [extract_features(image_path) for image_path in X_test]

# Define and train your models (SSD, Faster R-CNN, etc.)
# Example: You may use sklearn classifiers as placeholders. Replace them with appropriate models.
model_ssd = SVC()
model_faster_rcnn = RandomForestClassifier()
model_third = KNeighborsClassifier()

model_ssd.fit(X_train_features, y_train)
model_faster_rcnn.fit(X_train_features, y_train)
model_third.fit(X_train_features, y_train)

# Make predictions on the test set
y_pred_ssd = model_ssd.predict(X_test_features)
y_pred_faster_rcnn = model_faster_rcnn.predict(X_test_features)
y_pred_third = model_third.predict(X_test_features)

# Evaluate the models
def evaluate_model(y_true, y_pred, model_name):
    accuracy = accuracy_score(y_true, y_pred)
    f1 = f1_score(y_true, y_pred, average='weighted')
    recall = recall_score(y_true, y_pred, average='weighted')
    cm = confusion_matrix(y_true, y_pred)
    
    print(f"{model_name} Metrics:")
    print(f"Accuracy: {accuracy:.4f}")
    print(f"F1 Score: {f1:.4f}")
    print(f"Recall: {recall:.4f}")
    print("Confusion Matrix:")
    print(cm)

# Evaluate each model
evaluate_model(y_test, y_pred_ssd, "SSD Model")
evaluate_model(y_test, y_pred_faster_rcnn, "Faster R-CNN Model")
evaluate_model(y_test, y_pred_third, "Third Model")
